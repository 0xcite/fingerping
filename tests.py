# List of all the fingerprinting tests in the format : Test("name","image filename", test_function,"description")
# To add a test simply add a line to this file, tests are automatically recovered by python through reflection
from xpng import Xpng

checksums = Test("Checksums", "control", Xpng.correct_checksums, "Valid image, all libraries should be able to open it")
compression = Test("Compression", "control", Xpng.zlib_compression, "Test zlib compression level of output file")
filters = Test("filters RGB","control", Xpng.filters_used, "Check which filters have been used in the reencoding")
filters_i = Test("filters indexed","control_8bit", Xpng.filters_used, "Check which filters have been used in the reencoding")
control_8bit = Test("control_8bit","control_8bit", Xpng.conversion_success, "Valid paletted image")
control_8bit_i = Test("control_8bit_i","control_8bit_i", Xpng.conversion_success, "Valid paletted interlaced image")
control_grayscale = Test("control_grayscale","control_grayscale", Xpng.conversion_success, "Valid grayscale image")
control_rgba = Test("control_rgba","control_rgba", Xpng.conversion_success, "Valid image with alpha")
cesa_2004_001 = Test("CESA-2004-001","CESA-2004-001", Xpng.conversion_success, "Invalid file triggering CESA-2004-001")
two_plte = Test("two_plte_chunk","two_plte_chunk", Xpng.palette_used, "PNG file with two palettes, check which is used in result")
gamma_four_and_srgb = Test("gamma_four_and_srgb","gamma_four_and_srgb", Xpng.gamma,"PNG file with very high gamma, check if output is saturated")
gamma_four_nosrgb = Test("gamma_four_nosrgb","gamma_four_nosrgb", Xpng.gamma,"Test gamma of output image")
two_ihdr_chunk = Test("two_ihdr_chunk","two_ihdr_chunk", Xpng.ihdr_used, "PNG image with two header chunks, check which is used")
idat_bad_filter = Test("idat_bad_filter","idat_bad_filter", Xpng.bad_idat_filter, "Invalid scan line filter")
modified_phys = Test("modified_phys","modified_phys", Xpng.phys_chunk, "Check if decoder took phys into account")
truecolor_trns_chunk = Test("truecolor_trns_chunk","truecolor_trns_chunk", Xpng.truecolor_trns, "")
truecolor_alpha_trns_chunk = Test("truecolor_alpha_trns_chunk","truecolor_alpha_trns_chunk", Xpng.truecolor_trns, "truecolor + alpha image should not have a trns chunk")
transparent_bkdred = Test("transparent_bkdred","transparent_bkdred", Xpng.truecolor_trns, "")
black_white = Test("black_white","black_white", Xpng.conversion_success, "Valid black & white image")
chunk_with_number_in_name_before_idat = Test("chunk_with_number_in_name_before_idat","chunk_with_number_in_name_before_idat", Xpng.conversion_success, "Invalid chunk name")
CVE_2014_0333 = Test("CVE-2014-0333","CVE-2014-0333", Xpng.conversion_success, "")
first_idat_empty = Test("first_idat_empty","first_idat_empty", Xpng.conversion_success, "valid file with first idat empty")
grayscale_with_plte = Test("grayscale_with_plte","grayscale_with_plte", Xpng.conversion_success, "Grayscale images should not have a plte chunk")
idat_bad_zlib_checkbits = Test("idat_bad_zlib_checkbits","idat_bad_zlib_checkbits", Xpng.conversion_success, "invalid compressed data")
idat_bad_zlib_checksum = Test("idat_bad_zlib_checksum","idat_bad_zlib_checksum", Xpng.conversion_success, "invalid compressed data")
idat_bad_zlib_method = Test("idat_bad_zlib_method","idat_bad_zlib_method", Xpng.conversion_success, "invalid compressed data")
idat_empty_zlib_object = Test("idat_empty_zlib_object","idat_empty_zlib_object", Xpng.conversion_success, "invalid compressed data")
idat_junk_after_lz = Test("idat_junk_after_lz","idat_junk_after_lz", Xpng.conversion_success, "Some junk appended to idat")
idat_too_much_data = Test("idat_too_much_data","idat_too_much_data", Xpng.conversion_success, "too many scanlines in the compressed data")
idat_zlib_invalid_window = Test("idat_zlib_invalid_window","idat_zlib_invalid_window", Xpng.conversion_success, "invalid compressed data")
iend_before_idat = Test("iend_before_idat","iend_before_idat", Xpng.conversion_success, "iend must be last chunk")
ihdr_height_0 = Test("ihdr_height_0","ihdr_height_0", Xpng.conversion_success, "invalid height")
ihdr_invalid_compression_method = Test("ihdr_invalid_compression_method","ihdr_invalid_compression_method", Xpng.conversion_success, "invalid ihdr")
ihdr_invalid_filter_method = Test("ihdr_invalid_filter_method","ihdr_invalid_filter_method", Xpng.conversion_success, "invalid ihdr")
ihdr_not_first_chunk = Test("ihdr_not_first_chunk","ihdr_not_first_chunk", Xpng.conversion_success, "ihdr is not the first chunk")
ihdr_too_long = Test("ihdr_too_long","ihdr_too_long", Xpng.conversion_success, "Invalid ihdr")
ihdr_too_short = Test("ihdr_too_short","ihdr_too_short", Xpng.conversion_success, "Invalid ihdr")
ihdr_width_0 = Test("ihdr_width_0","ihdr_width_0", Xpng.conversion_success, "invalid width")
ihdr_widthheight0 = Test("ihdr_widthheight0","ihdr_widthheight0", Xpng.conversion_success, "invalid width and height")
indexed_no_plte = Test("indexed_no_plte","indexed_no_plte", Xpng.conversion_success, "indexed png file missing the plte chunk")
invalid_iccp_1 = Test("invalid_iccp_1","invalid_iccp_1", Xpng.conversion_success, "invalid iccp chunk")
invalid_iccp_2 = Test("invalid_iccp_2","invalid_iccp_2", Xpng.conversion_success, "invalid iccp chunk")
invalid_length_iend = Test("invalid_length_iend","invalid_length_iend", Xpng.conversion_success, "the length of the iend chunk should be zero")
invalid_name_ancillary_private_chunk_before_idat = Test("invalid_name_ancillary_private_chunk_before_idat","invalid_name_ancillary_private_chunk_before_idat", Xpng.conversion_success, "Invalid chunk name")
invalid_name_ancillary_public_chunk_before_idat_bad_checksum = Test("invalid_name_ancillary_public_chunk_before_idat_bad_checksum","invalid_name_ancillary_public_chunk_before_idat_bad_checksum", Xpng.conversion_success, "invalid chunk name and invalid checksum")
invalid_name_ancillary_public_chunk_before_idat = Test("invalid_name_ancillary_public_chunk_before_idat","invalid_name_ancillary_public_chunk_before_idat", Xpng.conversion_success, "invalid chunk name")
invalid_name_reserved_bit_ancillary_public_chunk_before_idat = Test("invalid_name_reserved_bit_ancillary_public_chunk_before_idat","invalid_name_reserved_bit_ancillary_public_chunk_before_idat", Xpng.conversion_success, "invalid chunk name")
ios_cgbl_chunk = Test("ios_cgbl_chunk","ios_cgbl_chunk", Xpng.conversion_success, "Apple png")
jng_file = Test("jng_file","jng_file", Xpng.conversion_success, "jng file")
junk_after_iend = Test("junk_after_iend","junk_after_iend", Xpng.conversion_success, "junk at the end of the image")
mng_file = Test("mng_file","mng_file", Xpng.conversion_success, "mng file")
no_iend = Test("no_iend","no_iend", Xpng.conversion_success, "missing iend")
nonconsecutive_idat = Test("nonconsecutive_idat","nonconsecutive_idat", Xpng.conversion_success, "non consecutive idat, not legal")
plte_after_idat = Test("plte_after_idat","plte_after_idat", Xpng.conversion_success, "plte after idat, it should be before")
png48 = Test("png48","png48", Xpng.conversion_success, "48bit per pixel png")
png64 = Test("png64","png64", Xpng.conversion_success, "64bit per pixel png")
transparent_truncated_palette = Test("transparent_truncated_palette","transparent_truncated_palette", Xpng.conversion_success, "transparent color is missing in palette")
truncated_chunk = Test("truncated_chunk","truncated_chunk", Xpng.conversion_success, "truncated chunk at end of file")
unknown_critical_chunk_bad_checksum = Test("unknown_critical_chunk_bad_checksum","unknown_critical_chunk_bad_checksum", Xpng.conversion_success, "chunk marked as critical, but not standard with bad checksum")
unknown_critical_chunk = Test("unknown_critical_chunk","unknown_critical_chunk", Xpng.conversion_success, "chunk marked as critical, but not standard")
